resources:
  - name: repo_pipe
    type: GitRepo
    configuration:
      gitProvider: varsha_github
      path: Varsha-Arun/Org_test_Automation  

  - name: imageTest
    type: Image
    configuration:
       registry: varsha_docker
       imageName: shippabledocker/jreq
       imageTag: master
       
pipelines:

  - name: test_simple_var
    steps:
      - name: test_custom_image
        type: Bash
        configuration:
          runtime: # optional            
            type: image
            image: 
              custom:
                name: shippabledocker/jfreq
                tag: latest
#                 registry: art # optional integration for private registry
#                 sourceRepository: docker # required if registry is artifactory
#                 region: <string> # required if registry is AWS
#                 options: <string> # optional
#                 autoPull: <boolean> # optional, defaults to true; pulls
          integrations: 
            - name: varsha_docker
#             - name: varsha_gcp
#             - name: varsha_aws
#             - name: art_v
        execution:
          onStart:
            - printenv
            
      - name: Bash_setup_var
        type: Bash
        configuration:
          inputSteps:
            - name: test_custom_image
        execution:
          onExecute:
            - printenv
    
      - name: Bash_setup_var2
        type: Bash
        configuration:
          inputSteps:
            - name: test_custom_image
        execution:
          onExecute:
            - printenv
            
      - name: Bash_setup_var3
        type: Bash
        configuration:
          inputSteps:
            - name: test_custom_image
        execution:
          onExecute:
            - printenv
      
      - name: Bash_setup_var4
        type: Bash
        configuration:
          inputSteps:
            - name: test_custom_image
        execution:
          onExecute:
            - printenv
            
      - name: d_AZ_u18_language
        type: Bash
        configuration:
          inputSteps:
            - name: Bash_setup_var
        execution:
          onExecute:
            - docker images
            #images should be in this order it self
            - images=(docker.bintray.io/jfrog/pipelines-u18go docker.bintray.io/jfrog/pipelines-u18node docker.bintray.io/jfrog/pipelines-u18java docker.bintray.io/jfrog/pipelines-u18cpp)
            - javatags=(8 11 13 14)
            - gotags=(1.14.4 1.13.12 1.12.17 1.11.13)
            - nodetags=(12.18.2 10.21.0 8.17.0)
            - cpptags=(8.0.0 9.0.0 10.0.0)
            - for docker_images in "${images[@]}"; do case "$docker_images" in "${images[0]}") for tags in "${gotags[@]}"; do  docker images | grep $docker_images | grep $tags ; done ;; "${images[1]}") for tags in "${nodetags[@]}"; do  docker images | grep $docker_images | grep $tags ; done ;;  "${images[2]}") for tags in "${javatags[@]}"; do  docker images | grep $docker_images | grep $tags ; done ;; "${images[3]}") for tags in "${cpptags[@]}"; do  docker images | grep $docker_images | grep $tags ; done ;;  esac; done

      - name: utilityFunction
        type: Bash
        configuration:
          integrations:
            - name: varsha_github
          inputResources:
            - name: repo_pipe
          inputSteps:
            - name: d_AZ_u18_language
        execution:
          onExecute: 
            - printenv
            - bump_semver v3.0.0 major
            - bump_semver v3.0.0 minor
            - bump_semver v3.0.0 patch
            - bump_semver v3.0.0 beta
            - pushd $res_repo_pipe_resourcePath    
            - touch keys
            - echo "name =$res_repo_pipe_gitProvider_name" >> keys
            - replace_envs $PWD/keys 
            - cat keys
            - touch file.txt
            - echo "Hello frog" >> file.txt
            - touch test.txt
            - echo "Hello pipelines team" >> test.txt
            - compare_git --resource repo_pipe --commit-range HEAD~3..HEAD UtilityFunction.yml
            - update_commit_status repo_pipe --status failure --message "My description 123" --context "stepB"            
            - read_json $res_repo_pipe_resourcePath/tests/yaml/sample.json "DOCKER_USERNAME"
            - add_cache_files $PWD/file.txt jfrog_pipe 
            - add_run_variables imageTag="master"
            #- add_run_variables runVaribale="foo   123"
            - add_run_files $PWD/test.txt jfrog
            - add_pipeline_variables scm=$int_s_gitHub_masterName
            # - add_pipeline_variables pipelineVaribale="foo  bar"
            - export_run_variables 
            - export_pipeline_variables          
            - add_pipeline_files $PWD/file.txt jfrog_pipeline
            - find_resource_variable repo_pipe resourcePath
            - restore_cache_files jfrog_pipe $PWD/file.txt
            - cat file.txt
            - openssl genrsa -out key.pem 1024 
            - openssl rsa -in key.pem -text -noout
            - openssl rsa -in key.pem -pubout -out pub.pem 
            - openssl rsa -in pub.pem -pubin -text -noout 
            - encrypt_string "secretValue" --key pub.pem
            - encrypted=$(encrypt_string "secretValue" --key pub.pem)
            - echo "$encrypted"
            - decrypt_string "$encrypted" --key key.pem
            - ls -l
            - touch crypt.txt
            - echo "testing for sample encryption" >> crypt.txt
            - encrypt_file --output encrypted.txt crypt.txt --key pub.pem
            - cat encrypted.txt
            - decrypt_file encrypted.txt --output decrypted.txt --key key.pem
            - cat decrypted.txt 
            - python -m py_compile tests/core/sampleExecutionFile/calc.py
            - pip install --upgrade pip
            - hash -d pip
            - pip install pytest           
            - py.test --verbose --junit-xml test-reports/results.xml tests/core/sampleExecutionFile/test_calc.py
            - save_tests $res_repo_pipe_resourcePath/test-reports/results.xml             
            - popd

      - name: utilityFunction2
        type: Bash
        configuration:
          integrations:
            - name: varsha_github
          inputSteps:
            - name: utilityFunction
          inputResources:
            - name: repo_pipe                
        execution:
          onExecute:
            - printenv
            - pushd $res_repo_pipe_resourcePath
            - restore_run_files jfrog $PWD/test.txt
            - cat $PWD/test.txt
            - restore_cache_files jfrog_pipe $PWD/file.txt
            - echo "$imageTag"
            - echo $runVariable
            - echo $pipelineVariable
            - popd

      - name: utilityFunction3
        type: Bash
        configuration:
          integrations:
            - name: varsha_github
          inputResources:
            - name: repo_pipe
          inputSteps:
            - name: utilityFunction2          
          outputResources:
            - name: imageTest
        execution:
          onExecute:
            - pushd $res_repo_pipe_resourcePath
            - restore_pipeline_files jfrog_pipeline $PWD/file.txt
            - cat file.txt
#             - execute_command [--retry] printen
#             - retry_command printen
            - popd
            
          onComplete:
            - send_notification varsha_slack
            - write_output imageTest "imageTag=master" 
  
      - name: nodePools_bash
        type: Bash
        configuration:
          nodePool: new_node
          inputSteps:
            - name: utilityFunction3      
        execution:
          onExecute:
            - printenv
          onComplete:
            - send_notification varsha_slack
