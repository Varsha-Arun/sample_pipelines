# Language setting
language: python

# Version number
python:
  - "2.7"
  - "pypy3"
  
env:
  global:
    - TEST1=pvtenv
    - secure: BPadRRYqA9yyfugIB6wRE9QMJn+aojYMDemPAgA4qhdo1jKduEiI/P58NhDquZ36HnjCuRnZdZ8z0PsGyeO0MT2UCqjtOxVRm1fnt2tfHEPSBvpQVRymXlXC3lbJcdDuknahx+r3vTuV21Gha2XWbQaM6cOHDuW4C++6IYh87YCwtbG66n6Hhs/QBQRyn1zGGK8HST5mVEiqq/Jn1v4OUTmMMqnk8FE2OAQYnf7gDS1TWFyhuij/CC6sL8rZw0HKvYBzpeEZo+QL9aI3YoxfO09jpFsF2vkQzkgO3inCjI1NU6M/+NN3Vwcs1NLqw5eM7fdKXBav/ORME7k543tSDA==
    ########### TEST2=pvtenvSecure
    
  matrix:
    - TEST3=pvtenv3
    - secure: udOvjFIFXqTQB8RSsZdS6p1Gl+EHGI8uyIs9FO5a9HZrc/4uxNNgxQUJH3t+3xUwlK9N2QNxwKDM/ZmGdqowtUqcFQgtl8omplFmdHDZOcuYp9k6pxN+Wtix+bMyNPR/ZzWpgZVJdOsRldERScgG1HvfWhHW0k4QyLjCil9v8A24bhoVIYFsfiUlpg4jMNLtqm0GLaiz09X9fzM/Cvt3aL/cySItddKGGybLPz8UfnUU3OWUhAnriyVoTXC3tRwfuzRaLTDguJ4NR+i92DQHZdiiNIwis9w4qWVK4Q0MsJ2GVQ0EcGjXG0aCWAfWtINWSvb794MOdXLa/cNsR4TD0Q==
    ########### TEST4=pvtenvSecureMatrix
    
build:
  ci:
    - python --version
    - echo "TEST1=$TEST1"
    - echo "TEST2=$TEST2"
    - echo "TEST3=$TEST3"
    - echo "TEST4=$TEST4"

resources:

#CLICONFIG
  - name: new-dockercli
    type: cliConfig
    integration: "docker"
    
  - name: new-awscli
    type: cliConfig
    integration: "awskeys"

  - name: new-gclcli
    type: cliConfig
    integration: "gcl"
    
#CLUSTERS
  - name: new-ddccluster
    type: cluster
    integration: ddc
    pointer:
      sourceName : "nothing" #we can anything because it is mandatory but ddc doesnot have clusters

  - name: new-awscluster
    type: cluster
    integration: awskeys
    versionTemplate: 
      region: us-east-1
      sourceName: clu1
      
#DOCKER OPTIONS
  - name: new-dockeroptions
    type: dockerOptions
    version:
      memory: 100

#FILES
  - name: new-files
    type: file
    integration: docker
    pointer:
      sourceName: "random"
    seed:
      versionName: "random-2"

#GITREPO:
  - name: mew-gitrepo
    type: gitRepo
    integration: "github"
    pointer:
      sourceName: "Varsha-Arun/sample-script"
      branch: master
      #tags:
       # only:
        #  - v1.*
      buildOnCommit: true    
      buildOnPullRequest: true
      buildOnRelease: true
      buildOnTagPush: true
      
#IMAGES
  - name: new-image
    type: image
    integration: docker
    pointer:
      sourceName: "shippabledocker/pipelinev2"
    seed:
      versionName: "deploy.1"
  
  - name: new-loadBalancerImage
    type: image
    integration: gcl
    pointer:
      sourceName: asia.gcr.io/lithe-camp-182705/nginx #public image which is running 
      isPull: true
    seed:
      versionName: "latest"

#INTEGRATION
  - name: new-dockerintegration
    type: integration
    integration: "docker"

#LOAD BALANCER      
  - name: new-gke-service-lb
    type: loadBalancer 
    integration: gcl
    pointer:
      sourceName: "servicetestlb"  # the service name (metadata.name) this source name 
      method: ClusterIP # the service type Kubernetes default: ClusterIP
      clusterName: "testnode2" # The namespace for the service - cluster name
      region: "asia-east1-a" #region of cluster n stuffs
      namespace: "default"    # optional
    version:
      ports:
        - name: lbports # Required for multiple ports, must be a DNS_LABEL
          protocol: TCP  # Kubernetes default: TCP
          port: 8001     # Required.
          targetPort: 8002 # A number in 1-65535 or an "IANA_SVC_NAME"  This is the port to access the pod.
         # nodePort: <integer> # Port exposed on the node.  Kubernetes will auto-allocate by default.
      selector:
        new: lb
        
#  - name: new-loadbalancer
 #   type: loadBalancer
 #   pointer:
 #     sourceName: EC2Contai-EcsElast-GPCOXIIKWPUJSREYA

#NOTIFICATIONS
  - name: new-slack
    type: notification
    integration: "slack"
    pointer:
      recipients:
        - "#rc-private"
        - "#rc-public"
        - "@shiptest-rc-ow"
        - "#random"
   
  - name: new-hipchat
    type: notification
    integration: "notify-hipchat"
    pointer:
      recipients:
        - "#rc-private"
        - "#rc-public"
        - "@shiptest.rc.ow"        
        - "#random"
   
  - name: new-irc
    type: notification
    #integration: "irc"
    versionTemplate:
      method: irc
      recipients:
        - "#testrc"
        - "#rcapp"
   
  - name: new-email
    type: notification
    #integration: "email"
    versionTemplate:
      method: email
      recipients:
        - "varsha@shippable.com"

#PARAMS
  - name: new-params
    type: params
    version:
      params:
        foo: bar
        TEST1: env1        
        secure: BPadRRYqA9yyfugIB6wRE9QMJn+aojYMDemPAgA4qhdo1jKduEiI/P58NhDquZ36HnjCuRnZdZ8z0PsGyeO0MT2UCqjtOxVRm1fnt2tfHEPSBvpQVRymXlXC3lbJcdDuknahx+r3vTuV21Gha2XWbQaM6cOHDuW4C++6IYh87YCwtbG66n6Hhs/QBQRyn1zGGK8HST5mVEiqq/Jn1v4OUTmMMqnk8FE2OAQYnf7gDS1TWFyhuij/CC6sL8rZw0HKvYBzpeEZo+QL9aI3YoxfO09jpFsF2vkQzkgO3inCjI1NU6M/+NN3Vwcs1NLqw5eM7fdKXBav/ORME7k543tSDA==
        ######### TEST2=pvtenvSecure
        TEST3: env3
        DB_HOST: "ds015700.mlab.com"
        DB_NAME: "ayeaye"
        DB_PORT: "15700"
        DB_USERNAME: "aye0aye"
        DB_PASSWORD: "aye0aye"
        ENVIRONMENT: "test-aws"
      
        
#REPLICAS
  - name: new-replica
    type: replicas
    version:
      count: 2

#STATE
  - name: new-state
    type: state
    
#TIME
  - name: new-testtime
    type: time
    seed:
      interval: "1 1 1 * *" #"*/9 * 9 9 *"
      
#VERSIONS

  - name: new-version
    type: version
    seed:
      versionName: "6.1.2"

jobs:

#DEPLOY  
  - name: new-awsdeploy
    type: deploy
    allowPublicAccess: true
    steps:
      - IN: ar-awscluster
      - IN: ar-manifest
        #switch: off
      - IN: ar-params
      - IN: ar-dockeroptions
      - IN: ar-replica
        #versionNumber: 1000 
        
#JENKINSJOB
 # - name: new-jenkins                  # a memorable, unique name. this is how your job will be referred to in shippable pipelines
 #   type: jenkinsJob                  # The type of the job (should not be changed by the user)
 #   integration: "jenkins"       # The name of your Jenkins integration (created via accountSettings page)
 #   pointer:
 #     sourceName: "firstjob1"         # The name of your Jenkins job
 #   steps:
 #     - OUT: "ar-files" 

#MANIFESTS
  - name: new-manifest
    type: manifest
    steps:
      - IN: ar-image
      # versionNumber: 100
      #- OUT: ar-image4invalidformat
      - IN: ar-tg1
    allowPublicAccess: true

#PROVISION
      
#  - name: new-provisionlb
 #   type: provision
 #   steps:
  #    - IN: new-loadBalancerImage
  
  - name: new-deployServicelb
    type: provision
    steps:
      - IN: new-gke-service-lb
      
#RELEASE
  - name: new-release
    type: release
    allowPublicAccess: true
    on_start:
      - NOTIFY: new-slack
    steps:
      - IN: new-version
         #versionName: testrelease
      - IN: new-inrunSh
      - TASK: managed
        bump: rc
       #- IN: new-tg3
    flags:
      - new-release    
    on_success:
      - NOTIFY: new-slack
      - NOTIFY: new-hipchat
      - NOTIFY: new-irc
      - NOTIFY: new=-email
    on_failure:
      - NOTIFY: new-slack
      - NOTIFY: new-hipchat
      - NOTIFY: new-irc
      - NOTIFY: new-email

#RUNCI
 # - name: sample_pipelines_runCI
 #   type: runCI
 #   #allowPublicAccess: true
  #  on_start:
  #   - NOTIFY: new-slack
  #  steps:
  #    - IN: new-dockercli
  #       #versionName: testrelease
  #  flags:
   #   - sample_pipelines_runCI
      
#RUNSH      
  - name: new-inrunSh
    type: runSh
    allowPublicAccess: false
    steps:
      - IN: new-params
      - IN: new-gitrepo
        showBuildStatus: true
      # versionName: testsha
      - TASK:
          runtime:
            options:
              imageName: "drydock/u16all" #"drydock/aarch64_u16all"
              imageTag: master
          script: 
            - ls
            - ./IN/ar-gitrepo/gitRepo/echo.sh
            - export FOO=foo1
            - echo $FOO
            - echo "TEST1=$TEST1"
            - echo "TEST2=$TEST2"
            - echo "TEST3=$TEST3"
            - lsb_release -a
            - docker --version
            - docker info
            - docker ps 
     # - OUT: ar-image2invalidimg    
    on_success:
      - script: echo 'Success'
    on_failure:
      - script: echo 'Failure runSh'
      - NOTIFY: new-slack

#RUNCLI      
  - name: myJob
    type: runSh
    triggerMode: <parallel/serial>
    dependencyMode: <chrono/strict/immediate>
    priority: <[0-10000]>
    allowPublicAccess: <true/false>
    runtime:
      nodePool: <node pool name>
      container: <true/false>
      timeoutMinutes: 10
    integrations:
      - <subint name>
      - <subint name>
    inputs:
      - resource: <resource>
        switch: off
      - resource: <resource>
        switch: off
        versionName: <versionName>
      - job: <job name>
      - resource: <gerrit repo resource>
        showBuildStatus: true
        vote:
          onSuccess:
            Verified: 1
            Code-Review: 2
          onFailure:
            Verified: -1
            Code-Review: -2
      - resource: <cliConfig resource>
        scopes:
          - scope
    tasks:
      - name: task1 <optional>
        runtime:
          container: <true/false>
          imageName: <name of image to boot>
          imageTag: <tag of image to boot>
          pull: <true/false>
          options: <docker options>
          env:
            - key: value
            - key2: value2
        script:
          - echo "do stuff"
      - name: task2
        script:
          - echo "do more stuff"
      - script:
          - echo "this is a third script, run in its own container"
    outputs:
      - resource: myImage
      - resource: <resource>
        replicate: true
        replicateOnPullRequest: true
        overwrite: true
    triggers:
      - <inputResourceName>
      - <inputResourceName>
    events:
      - onStart:
          notify:
            - mySlack
            - myIRC
      - onSuccess:
          notify:
            - mySlack
            - myIRC
          script:
            - echo "we did it!"
      - onFailure:
          notify:
            - mySlack
            - myIRC
          script:
            - echo "uh oh, something went wrong"
      - always:
          script:
            - bash command
      - onCancel:
          notify:
            - mySlack
            - myIRC
           
          
          
          
  - name: new-inrunshPublicJob
    type: runSh
    allowPublicAccess: true
    steps:
      - IN: new-gitrepo
      # versionName: testsha
      - IN: new-dockercli
      - IN: new-testtime
      #- IN: new-loadbalancer
      - IN: new-files
      - TASK:
        - script: ls
        - script: ./IN/new-gitrepo/gitRepo/echo.sh        
      
  - name: new-runshlongconsole
    type: runSh
    steps:
      - IN: new-gitrepo
      # versionName: testsha
      - IN: new-dockercli
      - IN: new-testtime
      #- IN: new-loadbalancer
      - IN: new-files
      - TASK:
        - script: ls
        - script: ./IN/new-gitrepo/gitRepo/echo.sh
    on_success:
      - NOTIFY: new-slack
      - NOTIFY: new-hipchat
      - NOTIFY: new-irc
      - NOTIFY: new-email
    on_failure:
      - NOTIFY: new-slack
      - NOTIFY: new-hipchat
      - NOTIFY: new-irc
      - NOTIFY: new-email
        
triggers:

#TRIGGER
  - name: new-tg1
    type: trigger
    version:
      counter: 1   
