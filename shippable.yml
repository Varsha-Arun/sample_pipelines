resources:

  - name: pipeline_scriptRepobb
    type: gitRepo
    integration: github
    pointer:
      sourceName: "Varsha-Arun/sample_pipelines"
    #  buildOnPullRequestClose: true
    #  buildOnPullRequest: true
      branches:
        only:
          - shipctl
  
  - name: sample_pipelinesRepo
    type: gitRepo
    integration: github
    pointer:
      sourceName: "Varsha-Arun/sample_pipelines"
      buildOnPullRequestClose: true
      buildOnPullRequest: true
      branches:
        only:
          - shipctl
          
  - name: test_params
    type: params
    version:
      params:
        TEST: rc
        KEY: env
      
  - name: ship_dh_cli
    type: cliConfig
    integration: "docker"
    
  - name: test_paramsCLI
    type: params
    versionTemplate:
      params:
        ENV: value
   
  - name: paramsRunshPullRequest
    type: params
    versionTemplate:
      params:
        - ENVPR1: valuePR1
        - ENVPR2: valuePR2
        
jobs:  
  - name: params_runsh
    type: runSh
    steps:
      - IN: test_params
      - TASK:
        - script: echo "Hello"
  
  - name: samplerunshpullrequest
    type: runSh
    steps:
      - IN: sample_pipelinesRepo
      - IN: paramsRunshPullRequest
      - TASK:
        - script: echo "Hello"
        - script: ./IN/sample_pipelinesRepo/gitRepo/script.sh
        - script: echo "ENVPR1=$ENVPR1"
        - script: echo "ENVPR2=$ENVPR2"
        
  - name: testparams
    type: runSh
    steps:
      - IN: test_params
      - TASK:
        - script: export ATNT=env
        - script: echo "ATNT=$ATNT"
        
  - name: shipctl_runsh
    type: runSh
    allowPublicAccess: false #never make this job allowPublicAccess: true since we have sensitive data
    steps:
      - IN: params_runsh
      - IN: ship_dh_cli
      - IN: test_paramsCLI
      - IN: pipeline_scriptRepobb
      - TASK:
        - script: echo "PIPELINE_SCRIPTREPOBB_STATE=$PIPELINE_SCRIPTREPOBB_STATE"
        - script: export testEnv=EnvFromJob
        - script: echo "testEnv=$testEnv"
        
        - echo "====================================================repeating this below====================================="
        - script: echo "--->get_resource_state"
        - script: MY_SHIPCTL_GET_RESOURCE_STATE="$(shipctl get_resource_state "test_paramsCLI")"
        - script: TEST="$MY_SHIPCTL_GET_RESOURCE_STATE"
        - script: echo "$TEST"
        - script: cat "$TEST"
        - script: MY_GET_RESOURCE_VERSION_KEY=$(shipctl get_resource_version_key "test_paramsCLI" "ENV")
        - script: echo MY_GET_RESOURCE_VERSION_KEY=$MY_GET_RESOURCE_VERSION_KEY
        - script: if [ "$MY_GET_RESOURCE_VERSION_KEY" == "value" ]; then echo 'success'; else test; fi
        
        - script: echo "--->shipctl copy_file_from_prev_state <filename> <topath>. Copies the file to the path supplied from the state folder of the previos run of the Job that is currently running."
        - script: shipctl copy_file_from_prev_state "test/jobs/config.json" "IN/same_syncRepos/gitRepo/test/jobs/config1.json"lue1
        - script: cat "IN/same_syncRepos/gitRepo/test/jobs/config1.json"
